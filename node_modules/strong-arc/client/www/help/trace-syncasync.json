{"id":"6718819","type":"page","title":"Synchronous vs. asynchronous waterfall","body":{"view":{"value":"This section shows the elapsed time for the selected code path across asynchronous boundaries. Each continuous block of Javascript code is represented by a solid rectangle, whose length is proportional to the amount of time spent executing that code. The label of the block shows the most significant function in that sequence of code.<p></p><p>The top bar is the time spent initiating the original function call. The lower bar is the time spent executing the callback function, and the line connecting the two represents the time spent waiting for a response; for example, for a database server to return a value.</p><p>Asynchronous callbacks are represented by lines connecting the time of the callback being scheduled to when it was invoked.</p><p>Click the bar to display the top costs (in terms of time spent) in the Inspector.</p><p>For more information, see <a href=\"http://docs.strongloop.com/display/SLC/Tracing\" class=\"external-link\" rel=\"nofollow\" target=\"_new\">Tracing</a>.</p><p> </p>","representation":"view","_expandable":{"content":"/rest/api/content/6718819"}},"_expandable":{"editor":"","export_view":"","storage":""}},"_links":{"webui":"/display/ARC/Synchronous+vs.+asynchronous+waterfall","tinyui":"/x/Y4Vm","collection":"/rest/api/content","base":"https://docs.strongloop.com","self":"https://docs.strongloop.com/rest/api/content/6718819"},"_expandable":{"history":"/rest/api/content/6718819/history","container":"","ancestors":"","children":"/rest/api/content/6718819/child","descendants":"/rest/api/content/6718819/descendant","space":"/rest/api/space/ARC","version":"","metadata":""}}
