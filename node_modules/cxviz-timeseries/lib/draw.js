'use strict';
var d3 = require('d3')

module.exports = function Draw(self){
  var drawfun = drawItems
  function drawItems(sel){
    // the this pointer will come from d3.call
    var ret = sel.each(function(d){
      var type = self.schema.type(d)
      var itemSel = d3.select(this)
      if( type == 'line'){
        drawfun.line(itemSel)
      } else if (type == 'rect') {
        drawfun.rect(itemSel)
      } else if( type == 'range') {
        drawfun.range(itemSel)
      }
    })
    return ret
  }
  drawfun.line = function line(sel){
    sel.append('path')
      .attr('d', function (d) { return self[d.type](d.values) })
      .attr('class', self.schema.lineClass)
      .style('stroke', self.schema.stroke)
  }

  drawfun.rect = function rect(sel){
    var g = sel.append('g')
    var update = g.selectAll('.cxviz-timeseries-rect').data(function(d) { return d.values})
    update.enter()
      .append('rect')
        .attr('x', function(d) { return leftx(self, d)})
        .attr('y', function(d) { return y(self, d, 'max')})
        .attr('width', function(d){ return width(self, d)})
        .attr('height', function(d){ return height(self, d)})
        .attr('class', self.schema.lineClass)
        .style('stroke', self.schema.stroke)
  }

  drawfun.range = function range(sel){
    var seriesg = sel.append('g')
    var update = seriesg.selectAll('.cxviz-timeseries-rect').data(function(d) { return d.values})
    var g = update.enter()
      .append('g')
      .attr('class', self.schema.lineClass)
    g.append('line')
        .attr('x1', function(d) { return x(self, d)})
        .attr('y1', function(d) { return y(self, d, 'max')})
        .attr('x2', function(d){ return x(self, d)})
        .attr('y2', function(d){ return y(self, d, 'min')})
        .attr('class', 'cxviz-timeseries-range-vertical')
        .style('stroke', self.schema.stroke)
    g.append('line')
        .attr('x1', function(d) { return leftx(self, d) })
        .attr('y1', function(d) { return y(self, d, 'max')})
        .attr('x2', function(d){ return rightx(self, d)})
        .attr('y2', function(d){ return y(self, d, 'max')})
        .attr('class', 'cxviz-timeseries-range-endcap')
        .style('stroke', self.schema.stroke)
    g.append('line')
        .attr('x1', function(d) { return leftx(self, d)})
        .attr('y1', function(d) { return y(self, d, 'min')})
        .attr('x2', function(d){ return rightx(self, d)})
        .attr('y2', function(d){ return y(self, d, 'min') })
        .attr('class', 'cxviz-timeseries-range-endcap')
        .style('stroke', self.schema.stroke)
  }

  return drawfun
}

function leftx(viz, d){
  return viz.x(d.date) - (width(viz, d) / 2)
}

function rightx(viz, d){
  return viz.x(d.date) + (width(viz, d) / 2)
}

function x(viz, d){
  return viz.x(d.date)
}

function y(viz, d, key){
  return viz[viz.schema.y(d)](key ? d.val[key] : d.val)
}

function width(viz, d){
  var computed = viz.raw.length / viz.innerWidth
  if( computed < 7 ){
    return 7
  } else if (computed > 20 ){
    return 20
  } else {
    return computed
  }
}

function height(viz, d){
  var h = y(viz, d, 'min') - y(viz, d, 'max')
  return (h < 2 ) ? 2 : h
}
