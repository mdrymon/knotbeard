{
  "name": "syno",
  "version": "1.0.6",
  "description": "Simple Node.js wrapper (browser included) and CLI for Synology DSM REST API.",
  "main": "dist/syno.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jimrobs/syno.git"
  },
  "keywords": [
    "syno",
    "synology",
    "dsm",
    "filestation",
    "downloadstation",
    "audiostation",
    "videostation",
    "videostation_dtv",
    "surveillancestation"
  ],
  "author": {
    "name": "jimrobs",
    "email": "jimmy@jimrobs.com",
    "url": "https://github.com/jimrobs"
  },
  "contributors": [
    {
      "name": "kwent",
      "email": "contact@quent.in",
      "url": "https://github.com/kwent"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jimrobs/syno/issues"
  },
  "homepage": "https://github.com/jimrobs/syno",
  "bin": {
    "syno": "bin/syno.js"
  },
  "dependencies": {
    "lodash": "^3.1.0",
    "request": "^2.48.0",
    "commander": "^2.6.0",
    "nconf": "^0.8.2",
    "js-yaml": "^3.2.6",
    "path-extra": "^2.0.0"
  },
  "devDependencies": {
    "browserify": "^11.2.0",
    "coffeelint": "^1.8.1",
    "grunt": "^0.4.5",
    "grunt-coffeelint": "0.0.13",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-coffee": "^0.13.0",
    "grunt-contrib-concat": "^0.5.0",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-contrib-uglify": "^0.9.2",
    "grunt-mokuai-coffee": "^1.0.1",
    "grunt-nsgen": "^0.1.3",
    "grunt-shell": "^1.1.1",
    "grunt-wrap": "^0.3.0",
    "load-grunt-config": "^0.17.2",
    "time-grunt": "^1.0.0"
  },
  "readme": "# Syno\n\nSimple Node.js wrapper (browser included) and CLI for Synology DSM REST API.\n\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\n[![Build Status](https://travis-ci.org/JimRobs/syno.svg?branch=master)](https://travis-ci.org/JimRobs/syno)\n[![npm version](https://img.shields.io/npm/v/syno.svg?style=flat)](https://www.npmjs.com/package/syno)\n[![Dependency Status](https://david-dm.org/JimRobs/syno.svg?theme=shields.io)](https://www.npmjs.com/package/syno)\n[![devDependency Status](https://david-dm.org/JimRobs/syno/dev-status.svg?theme=shields.io)](https://www.npmjs.com/package/syno)\n![Synology Development Tool](https://www.synology.com/img/support/developer/banner.png)\n\nSee [Synology Development Tool](https://www.synology.com/en-us/support/developer#tool).\n\n# Installation\n\nJust install the module using npm.\n\n```bash\n$ npm install syno\n```\n\nIf you want to save it as a dependency, just add the `--save` option.\n\n```bash\n$ npm install syno --save\n```\n\nIf you want to install with the **CLI** executable, just add the `--global` option.\n\n```bash\n$ npm install syno --global\n```\n\n# Syno API\n\nThis is a simple presentation of the syno API and its methods.\nTo get more information (parameters, response data, ...) use the PDF documents (see in the [wiki](https://github.com/JimRobs/syno/wiki)).\n\n* [Authentication Syno API](https://github.com/JimRobs/syno/wiki/Authentication-API)\n* [File Station Syno API](https://github.com/JimRobs/syno/wiki/File-Station-API)\n* [Download Station Syno API](https://github.com/JimRobs/syno/wiki/Download-Station-API)\n* [Audio Station Syno API](https://github.com/JimRobs/syno/wiki/Audio-Station-API)\n* [Video Station Syno API](https://github.com/JimRobs/syno/wiki/Video-Station-API)\n* [Video Station DTV Syno API](https://github.com/JimRobs/syno/wiki/Video-Station-DTV-API)\n* [Surveillance Station Syno API](https://github.com/JimRobs/syno/wiki/Surveillance-Station-API)\n\n# Javascript wrapper\n\n```js\nvar Syno = require('syno');\nvar syno = new Syno({\n    // Requests protocol : 'http' or 'https' (default: http)\n    protocol: 'https',\n    // DSM host : ip, domain name (default: localhost)\n    host: 'demo.synology.com',\n    // DSM port : port number (default: 5000)\n    port: '5001',\n    // DSM User account (required)\n    account: 'admin',\n    // DSM User password (required)\n    passwd: 'synology'\n});\n```\n\nThis is how to use an API on the `syno` object\n\n```js\nsyno.api.method(params, callback);\n```\n\nAll arguments are optional by default :\n- `params` : object hash with request parameters\n- `callback` : function called with 2 arguments (`error`, `data`)\n\nThe `data` arguments passed to the callback is an object hash, holding the response data. (see API documents)\n\nBoth the `params` and `callback` are optional, so you can call any method these ways :\n\n```js\n// Both params and callback\nsyno.api.method(params, callback);\n// Only params parameter\nsyno.api.method(params);\n// Only callback parameter\nsyno.api.method(callback);\n// No parameter\nsyno.api.method();\n```\n\n**N.B** : If the `params` parameter is not passed, but the method expects **required parameters**, an `Error` will be\nthrown.\n\n## Examples\n\n```js\n// File Station API - Provide File Station information\nsyno.fs.getFileStationInfo(callback);\n// File Station API - Enumerate files in a given folder\nsyno.fs.listFiles({'folder_path':'/path/to/folder'}, callback);\n// Download Station API - List download tasks\nsyno.dl.listFiles({'limit':5, 'offset':10}, callback);\n// Download Station API - Create a download task\nsyno.dl.createTask({'uri':'https://link'}, callback);\n// Audio Station API - Search a song\nsyno.as.searchSong({'title':'my_title_song'}, callback);\n// Video Station API - List movies\nsyno.vs.listMovies({'limit':5}, callback);\n// Video Station DTV API - List channels\nsyno.dtv.listDTVChannels({'limit':5}, callback);\n// Surveillance Station API - Get camera information\nsyno.ss.getCameraInfo({'cameraIds':4}, callback);\n```\n# CLI\n\n```\n$ syno --help\nUsage: syno [options]\n\n  Synology Rest API Command Line\n\n  Options:\n\n    -h, --help           output usage information\n    -V, --version        output the version number\n\n  Commands:\n\n    filestation|fs [options] <method> DSM File Station API\n    downloadstation|dl [options] <method> DSM Download Station API\n    audiostation|as [options] <method> DSM Audio Station API\n    videostation|vs [options] <method> DSM Video Station API\n    videostationdtv|dtv [options] <method> DSM Video Station DTV API\n    surveillancestation|ss [options] <method> DSM Surveillance Station API\n\n  Examples:\n\n    $ syno filestation|fs getFileStationInfo\n    $ syno downloadstation|dl getDownloadStationInfo\n    $ syno audiostation|as getAudioStationInfo\n    $ syno videostation|vs getVideoStationInfo\n    $ syno videostationdtv|dtv listDTVChannels --payload '{\"limit\":5}' --pretty\n    $ syno surveillancestation|ss getSurveillanceStationInfo\n```\n## Examples\n\n```bash\n# File Station API - Provide File Station information\n$ syno fs getFileStationInfo --pretty\n# File Station API - Enumerate files in a given folder\n$ syno fs listFiles --payload '{\"folder_path\":\"/path/to/folder\"}' --pretty\n# Download Station API - List download tasks\n$ syno dl listFiles --payload '{\"limit\":5, \"offset\":10}' --pretty\n# Download Station API - Create a download task\n$ syno dl createTask --payload '{\"uri\":\"https://link\"}'\n# Audio Station API - Search a song\n$ syno as searchSong --payload '{\"title\":\"my_title_song\"}' --pretty\n# Video Station API - List movies\n$ syno vs listMovies --payload '{\"limit\":5}' --pretty\n# Video Station DTV API - List channels\n$ syno dtv listDTVChannels --payload '{\"limit\":5}' --pretty\n# Surveillance Station API - Get camera information\n$ syno ss getCameraInfo --payload '{\"cameraIds\":4}' --pretty\n```\n\n\n## CLI Authentication\n\n### Without a configuration file\n\n```bash\n$ syno fs getFileStationInfo --url https://admin:synology@demo.synology.com:5001 --pretty\n```\n\n### With a configuration file\n\n```yaml\n\n# Example config file, by default it should be located at:\n# ~/.syno/config.yaml\n\nurl:\n  protocol: https\n  host: localhost\n  port: 5001\n  account: admin\n  passwd: password\n```\n\n```bash\n$ syno fs getFileStationInfo --pretty\n```\n\nMore usage [examples](https://github.com/JimRobs/syno/wiki/CLI) in the [wiki](https://github.com/JimRobs/syno/wiki).\n\n# Browser\n\n### Note\n\nBe sure to disable [same-origin policy](http://en.wikipedia.org/wiki/Same-origin_policy) in your browser.\n\n## Example\n\n```html\n<html>\n  <head>\n  <script src=\"syno.min.js\"></script>\n  <script type=\"text/javascript\">\n  var Syno = require('syno.Syno');\n  var syno = new Syno({\n      // Requests protocol : 'http' or 'https' (default: http)\n      protocol: 'https',\n      // DSM host : ip, domain name (default: localhost)\n      host: 'demo.synology.com',\n      // DSM port : port number (default: 5000)\n      port: '5001',\n      // DSM User account (required)\n      account: 'admin',\n      // DSM User password (required)\n      passwd: 'synology'\n  });\n\n  syno.fs.getFileStationInfo(function(error, data) {\n    console.log(data)  \n  });\n  </script>\n  </head>\n<html>\n```\n\n## Demo\n\nA demo is available [online](http://jimrobs.github.io/syno/) or in the `test/browser` folder.\n\n# Authors\n\n- [Jimmy Roberts](https://github.com/JimRobs)\n- [Quentin Rousseau](https://github.com/kwent)\n\n# License\n\n```plain\nCopyright (c) 2015 Jimmy Robert <jimmy@jimrobs.com> & Quentin Rousseau <contact@quent.in>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n```\n",
  "readmeFilename": "README.md",
  "_id": "syno@1.0.6",
  "_shasum": "430e5f61c28d9ea0a52c6ae0320260c57f68cf0e",
  "_from": "syno@1.0.6",
  "_resolved": "https://registry.npmjs.org/syno/-/syno-1.0.6.tgz"
}
