'use strict';

var d3                              = require('d3')
var $                               = require('jquery')
var color                           = require('cxviz-color')
var Emitter                         = require('component-emitter')
var flameid                         = 0
var format                          = require('cxviz-format')

require("./flametree") // mutates d3

function FlameGraph() {
  if (!(this instanceof FlameGraph)) return new FlameGraph()
  return this
}

Emitter(FlameGraph.prototype)

//exported functions

FlameGraph.prototype.init = function init(element, options) {
  var self = this
  this.width = 1000
  this.height = 1000
  this.cb = options && options.cb
  this.color = (options && options.cb) || color
  this.el = element
  this.scale = 1
  this.zoomEnabled = !(options.disableZoom)
  this.flameid = flameid++

  this.svg = d3.select(element).append('svg')
    .attr('class', 'cxviz-flame')

  this.zoom = d3.behavior.zoom()
    .scaleExtent([0.4, 100])
    .on('zoom', handleZoom)

  this.parentGroup = this.svg.append('g')
    .call(this.zoomEnabled ? this.zoom : function(){return this})

  this.zoomRect = this.parentGroup.append('rect')
    .style('fill', 'none') // TODO css
    .attr('pointer-events', this.zoomEnabled ? 'all' : 'auto')
    .attr('width', '100%')
    .attr('height', '100%')

  this.margin   = this.parentGroup.append('g')
  this.zoomCont = this.margin.append('g')
  this.plot     = this.zoomCont.append('g')

  this.axisCont = this.zoomCont.append('g')
    .attr('class', 'cxviz-flame-axis')

  function handleZoom() {
    if( self.zoomEnabled ){
      self.scale = d3.event.scale
      self.zoomCont.attr('transform', 'translate(' + [d3.event.translate[0], 0] + ')')
      if( self.lastData ){
        self.update(self.lastData, self.lastFunctions)
      }
    }
  }

  return this
}

FlameGraph.prototype.setActive = function setActive(){
  //set ourselves to the zoomControl
  this.cb.zoomControl.setZoom(this.zoom)
  this.cb.zoomControl.show()
}

FlameGraph.prototype.setInactive = function setInactive(){
  this.cb.zoomControl.hide()
}

FlameGraph.prototype.resize = function resize() {
  if (!this.lastData) return
  this.update(this.lastData, this.lastFunctions)
}

FlameGraph.prototype.update = function update(data, functions) {
  var self = this
  this.lastData = data
  this.lastFunctions = functions
  this.coords = this.layoutCoords(this.el, data)
  this.layoutGraph()
  var x = this.coords.xscale
  var y = this.coords.yscale

  var vis = this.plot

  // Map each name to its bucket.
  var flametree = d3.layout.flametree()
    .value(function(d) {
      return d.cost
    })

  var p = flametree(data.costTree)

  var sel = vis.selectAll('.cxviz-flame-item')
    .data(p, function key(d){ return d.uid })

  var g = sel.enter()
    .append('g')
    .attr("clip-path", function(d){ return 'url(#' + self.getClipId(d) + ')' })
    .attr('class', 'cxviz-flame-item')

  g.append("title")
      .text(nodeText)

  g.append('svg:rect')
    .attr('x', function(d) {
      return x(d.x)
    })
    .attr('y', function(d) {
      return y(1.0 - d.y)
    })
    .attr('width', function(d) {
      return x(d.dx)
    })
    .attr('height', function(d) {
      return y(d.dy)
    })
    .attr('stroke', strokeColor)
    .attr('fill', modColor)
    .on('mouseenter', function(d){ self.mouseEnter(d3.select(this), d)})
    .on('mouseleave', function(d){ self.mouseLeave(d3.select(this), d)})
    .on('click', function(d){ self.click(d3.select(this), d)})
  g.append("clipPath")
      .attr("id", function(d){return self.getClipId(d)})
    .append("rect")
      .attr("class", "clipPathRect")
      .attr("y", function(d) { return y(1.0 - d.y) })
      .attr("height", function(d){ return y(d.dy)})
      .attr("x", function(d) { return x(d.x) })
      .attr("width", function(d) { return x(d.dx) })

  g.append('text')
    .on('mouseenter', function(d){ self.mouseEnter(d3.select(this), d)})
    .on('mouseleave', function(d){ self.mouseLeave(d3.select(this), d)})
    .on('click', function(d){ self.click(d3.select(this), d)})
    .attr('x', function(d) {
      return x(d.x)
    })
    .attr('y', function(d) {
      return y((1.0 - d.y) + d.dy / 2)
    })
    .attr('dx', '6') // margin
    .attr('dy', '.35em') // vertical-align
    .text(nodeText)

  sel.select('title')
    .text(nodeText)

  sel.select('rect')
     .attr('x', function(d) {
      return x(d.x)
    })
    .attr('y', function(d) {
      return y(1.0 - d.y)
    })
    .attr('width', function(d) {
      return x(d.dx)
    })
    .attr('height', function(d) {
      return y(d.dy)
    })
    .attr('stroke', strokeColor)
    .attr('fill', modColor)

  sel.select('.clipPathRect')
      .attr("y", function(d) { return y(1.0 - d.y) })
      .attr("height", function(d){ return y(d.dy)})
      .attr("x", function(d) { return x(d.x) })
      .attr("width", function(d) { return x(d.dx) })

  sel.select('text')
    .attr('x', function(d) {
      return x(d.x)
    })
    .attr('y', function(d) {
      return y((1.0 - d.y) + d.dy / 2)
    })
    .attr('dx', '6') // margin
    .attr('dy', '.35em') // vertical-align
    .text(nodeText)

  sel.exit()
    .remove()

  //now handle the axis
    // axis -- always draw this
  var axis = d3.svg.axis()
    .scale(d3.scale.linear().domain([0, 100]).range(self.coords.xscale.range()))
    .orient('bottom')
    .tickFormat(percentFormat)

  self.axisCont.call(axis)

  self.modColor = modColor

  function modColor(d){
    return self.color.moduleColor(getModName(d))
  }

  function strokeColor(d){
    return d3.rgb(modColor(d)).darker()
  }

  function nodeText(d){
    return d.name
  }
  function getModName(d){
    var fn = functions[d.id]
    return fn && fn.module && (fn.module.name || fn.module.filename)
  }
}

FlameGraph.prototype.layoutGraph = function layoutGraph(){
  this.svg
    .attr('height', this.coords.overallHeight)
    .attr('width', this.coords.overallWidth)
  this.margin
    .attr('transform', 'translate(' + [this.coords.marginLeft, 0] + ')')
  this.axisCont
    .attr('transform', 'translate(' + [0, this.coords.graphHeight + this.coords.rowHeight + this.coords.axisSpacing] + ')')
}

FlameGraph.prototype.layoutCoords = function layoutCoords(el, data){
  var coords = {}
  coords.rowHeight = 18
  coords.axisHeight = 30
  coords.marginLeft = 20
  coords.marginRight = 20
  coords.axisSpacing = 5
  var heightMultiplier = data.maxDepth + 3
  coords.graphHeight = heightMultiplier * coords.rowHeight
  coords.maxEnd = data.costTree.childCost

  coords.contWidth = $(el).width() || 1000 //(use jquery to get width without padding)
  if( $(el).width() <= 0 ){
    console.log('negative or zero width parent element', $(el).width())
  }
  coords.graphWidth    = coords.contWidth - coords.marginLeft - coords.marginRight
  coords.overallHeight = coords.graphHeight + coords.axisHeight + coords.rowHeight + coords.axisSpacing  //TODO--we have an off by 1 error on rowHeight somehwo
  coords.overallWidth  = coords.contWidth

  coords.xscale = d3.scale.linear().range([0,coords.graphWidth * this.scale])
  coords.yscale = d3.scale.linear().range([0,coords.graphHeight])

  return coords
}

FlameGraph.prototype.mouseEnter = function mouseEnter(sel, d){
  this.emit('mouseenter', {
    type: "flame",
    item: d
  })
}

FlameGraph.prototype.mouseLeave = function mouseLeave(sel, d){
  this.emit('mouseleave', {
    type: 'flame',
    item: d
  })
}

FlameGraph.prototype.click = function click(sel, d){
  this.emit('click', {
    type: 'flame',
    item: d
  })
}

FlameGraph.prototype.highlight = function (data) {
  var sel = d3.select(this.el).selectAll('.cxviz-flame-item')
  sel.each(function (item) {
    d3.select(this).classed('cxviz-flame-highlight', function(d){
      return data === d
    })
  })
}

FlameGraph.prototype.select = function (data) {
  var sel = d3.select(this.el).selectAll('.cxviz-flame-item')
  sel.each(function (item) {
    d3.select(this).classed('cxviz-flame-selected', function(d){
      return data === d
    })
  })
}

FlameGraph.prototype.clearSelection = function clearSelection(){
  this.svg.selectAll('.cxviz-flame-selected').classed('cxviz-flame-selected', false).attr('fill', this.modColor)
}

FlameGraph.prototype.getClipId = function getClipId(d){
  return 'cxviz-flame_' + this.flameid.toString(32) + '_' + encodeURI(d.uid || 'root')
}

module.exports = FlameGraph

function percentFormat(d) {
  return d + '%'
}
