'use strict';

/**
 * Dependencies
 */

var d3      = require('d3')
var Work    = require('./lib/work')
var Wait    = require('./lib/wait')
var Label   = require('./lib/label')
var Row     = require('./lib/row')
var Emitter = require('component-emitter')
var layout  = require('./lib/layout')
var color   = require('cxviz-color')


/**
 * Waterfall Constructor
 *
 * @return {Waterfall}
 * @public
 */

function EventLoopViz () {
  if (!(this instanceof EventLoopViz)) return new EventLoopViz()
  return this
}

Emitter(EventLoopViz.prototype)


/**
 * Init
 *
 * @param {Element} el
 * @param {Object} options
 * @public
 */

EventLoopViz.prototype.init = function (el, options) {
  // Options
  var opts = this.opts = options || {}
  opts.rowHeight = opts.rowHeight || 30
  opts.expanded = opts.expanded || false
  this.color = opts.color || color
  this.el = el
  this.coords = layout(el, opts.expanded)
  this.width = d3.select(el).attr('width')
  this.svg = d3.select(el)
    .append('svg')
    .attr('width', '100%')
    .attr('height', '100%')
    .attr('class', 'cxviz-eventloop')
    .attr('preserveAspectRatio', 'none')

  this.margin = this.svg.append('g')
    .attr('class', 'cxviz-eventloop-margin')
  this.axisCont = this.margin.append('g')
    .attr('class', 'cxviz-eventloop-axis')
  this.graphCont = this.margin.append('g')
    .attr('class', 'cxviz-eventloop-graphCont')
  this.labelCont = this.margin.append('g')
    .attr('class', 'cxviz-eventloop-labelCont')
  this.labelCont.append('clipPath')
    .attr('id', 'cxviz-eventloop-labelclip')
    .append('rect')
      .attr('class', 'clip-path-rect')
      .attr('x', 0)
      .attr('y', 0)
  this.rowCont = this.margin.append('g')
    .attr('class', 'cxviz-eventloop-rowCont')

  this.wait  = new Wait(this)
  this.work  = new Work(this)
  this.label = new Label(this)
  this.row   = new Row(this)
  return this
}


/**
 * Update
 *
 * @param {Array} data
 * @public
 */

EventLoopViz.prototype.update  = function (data, fns) {
  var self = this
  this.fns = fns
  this.lastData = data
  this.coords = layout(this.el, this.opts.expanded, data)
  this.layoutGraph()

  //this.svg.attr('viewBox', ['0', '0', this.coords.overallWidth, this.coords.overallHeight].join(' ') )
  this.work.updateSel(this.graphCont, this.opts.expanded, data)
  this.wait.updateSel(this.graphCont, this.opts.expanded, data)
  if( self.opts.expanded ){
    this.row.updateSel(this.rowCont, this.opts.expanded, data)
    this.label.updateSel(this.labelCont, data)


  } else {
    this.label.clearSel(this.labelCont)
    this.row.clearSel(this.svg)
  }
  // axis -- always draw this
  var axis = d3.svg.axis()
    .scale(self.coords.xscale)
    .orient('bottom')
    .tickFormat(msFormat)

  self.axisCont.call(axis)

}

EventLoopViz.prototype.resize = function resize() {
  if (!this.lastData) return
  this.update(this.lastData)
}


/**
 * setActive
 *
 * @param {Type} name
 * @return {Type}
 * @public
 */

EventLoopViz.prototype.setActive = function() {

}


/**
 * setInactive
 *
 * @param {Type} name
 * @return {Type}
 * @public
 */

EventLoopViz.prototype.setInactive = function() {

}


EventLoopViz.prototype.expand = function (state) {
  if (typeof state === 'undefined') state = !this.opts.expanded
  this.opts.expanded = state
  this.update(this.data)
}

EventLoopViz.prototype.layoutGraph = function layoutGraph(){
  this.svg
    .attr('height', this.coords.overallHeight)
    .attr('width', this.coords.overallWidth)
  this.margin
    .attr('transform', 'translate(' + [this.coords.marginLeft, 0] + ')')
  this.axisCont
    .attr('transform', 'translate(' + [this.coords.labelWidth, 0] + ')')
  this.graphCont
    .attr('transform', 'translate(' + [this.coords.labelWidth, this.coords.axisHeight] + ')')
  this.labelCont
    .attr('transform', 'translate(' + [0, this.coords.axisHeight] + ')')
  this.rowCont
    .attr('transform', 'translate(' + [0, this.coords.axisHeight] + ')')

  //now adjust the label container cliprect
  this.labelCont.select('rect.clip-path-rect')
    .attr('height', this.coords.overallHeight - this.coords.axisHeight)
    .attr('width', this.coords.labelWidth)
}

EventLoopViz.prototype.highlight = function(data) {
  this.row.highlight(data)
}

EventLoopViz.prototype.select = function(data) {
  this.row.select(data)
}


var format = d3.format('.3s')

function msFormat(d){
  return format(d/1000000) + 's'
}

/**
 * Exports
 */

module.exports = EventLoopViz
