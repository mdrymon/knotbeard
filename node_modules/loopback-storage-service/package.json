{
  "name": "loopback-storage-service",
  "description": "Loopback Storage Service",
  "version": "1.0.4",
  "main": "index.js",
  "scripts": {
    "test": "mocha --timeout 30000 test/*test.js"
  },
  "dependencies": {
    "pkgcloud": "~0.9.6",
    "async": "~0.9.0",
    "formidable": "~1.0.14"
  },
  "devDependencies": {
    "express": "~3.4.0",
    "loopback": "1.x.x",
    "mocha": "~1.18.2",
    "supertest": "~0.13.0",
    "mkdirp": "~0.5.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/loopback-storage-service.git"
  },
  "license": {
    "name": "Dual Artistic-2.0/StrongLoop",
    "url": "https://github.com/strongloop/loopback-strorage-service/blob/master/LICENSE"
  },
  "readme": "# loopback-storage-service\n\nLoopBack storage service provides Node.js and REST APIs to manage binary contents\nusing pluggable storage providers, such as local file systems, Amazon S3, or\nRackspace cloud files. We use [pkgcloud](https://github.com/pkgcloud/pkgcloud) to support the cloud based\nstorage services including:\n\n- Amazon\n- Rackspace\n- Openstack\n- Azure\n\nThe binary artifacts are organized with containers and files. A container is the\ncollection of files. Each file will belong to a container.\n\n## Define a model with the loopback-storage-service connector\n\nLoopBack exposes the APIs using a model that is attached to a data source configured\nwith the loopback-storage-service connector.\n\n    var ds = loopback.createDataSource({\n        connector: require('loopback-storage-service'),\n        provider: 'filesystem',\n        root: path.join(__dirname, 'storage')\n    });\n\n    var container = ds.createModel('container');\n\nThe following methods are mixed into the model class:\n\n- getContainers(cb): List all containers\n- createContainer(options, cb): Create a new container\n- destroyContainer(container, cb): Destroy an existing container\n- getContainer(container, cb): Look up a container by name\n\n- uploadStream(container, file, options, cb): Get the stream for uploading\n- downloadStream(container, file, options, cb): Get the stream for downloading\n\n- getFiles(container, download, cb): List all files within the given container\n- getFile(container, file, cb): Look up a file by name within the given container\n- removeFile(container, file, cb): Remove a file by name  within the given container\n\n- upload(req, res, cb): Handle the file upload at the server side\n- download(container, file, res, cb): Handle the file download at the server side\n\n## Configure the storage providers\n\nEach storage provider takes different settings; these details about each specific\nprovider can be found below:\n\n* Local File System\n\n\n    {\n        provider: 'filesystem',\n        root: '/tmp/storage'\n    }\n\n* Amazon\n\n\n    {\n        provider: 'amazon',\n        key: '...',\n        keyId: '...'\n    }\n\n* Rackspace\n\n\n    {\n        provider: 'rackspace',\n        username: '...',\n        apiKey: '...'\n    }\n\n* OpenStack\n\n\n    {\n        provider: 'openstack',\n        username: 'your-user-name',\n        password: 'your-password',\n        authUrl: 'https://your-identity-service'\n    }\n\n* Azure\n\n\n    {\n        provider: 'azure',\n        storageAccount: \"test-storage-account\",         // Name of your storage account\n        storageAccessKey: \"test-storage-access-key\" // Access key for storage account\n    }\n\n\n## REST APIs\n\n- GET /api/containers\n\nList all containers\n\n- GET /api/containers/:container\n\nGet information about a container by name\n\n- POST /api/containers\n\nCreate a new container\n\n- DELETE /api/containers/:container\n\nDelete an existing container by name\n\n- GET /api/containers/:container/files\n\nList all files within a given container by name\n\n- GET /api/containers/:container/files/:file\n\nGet information for a file within a given container by name\n\n- DELETE /api/containers/:container/files/:file\n\nDelete a file within a given container by name\n\n- POST /api/containers/:container/upload\n\nUpload one or more files into the given container by name. The request body should\nuse [multipart/form-data](https://www.ietf.org/rfc/rfc2388.txt) which the file input\ntype for HTML uses.\n\n- GET /api/containers/:container/download/:file\n\nDownload a file within a given container by name",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/loopback-storage-service/issues"
  },
  "homepage": "https://github.com/strongloop/loopback-storage-service",
  "_id": "loopback-storage-service@1.0.4",
  "_shasum": "b585dc745a56d5700e0a0ba38f683b17b6a39a18",
  "_from": "loopback-storage-service@1.0.4",
  "_resolved": "https://registry.npmjs.org/loopback-storage-service/-/loopback-storage-service-1.0.4.tgz"
}
