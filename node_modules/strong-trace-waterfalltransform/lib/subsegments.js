"use strict";

var _       = require('underscore')

module.exports = computeSubsegments

function computeSubsegments(w){
  if( w.segments && w.segments.length === 0){
    return
  }

  var tree          = w.tree
  var blockedMicros = 0
  var depth         = 0
  var maxEnd        = 0

  tree.children.forEach(dft)
  w.blockedMicros = blockedMicros
  w.maxEnd        = maxEnd

  function dft(tree){
    var costs,
        s,
        child = 0
    if( !tree.id ){
      return
    }

    s = tree.segment

    if( tree.children.length ){
      depth++
      costs = tree.children.map(dft)
      s.childSegments = _.flatten(costs)
      s.childSegments.map(function(d){child += d.exclusive})
      depth--
    }
    s.inclusive = s.end - s.start

    maxEnd = (s.end > maxEnd) ? s.end : maxEnd

    if (depth == 1) {
      blockedMicros += s.inclusive
    }

    s.exclusive = s.inclusive - child
    s.subSegments = invertChildSegments(s, s.childSegments)
    return {
      exclusive: s.exclusive,
      start: s.start,
      end: s.end
    }
  }
}

function invertChildSegments(seg, children){
  children = children || []
  var id = 1
  var subs = []
  var s = {
    start: seg.start,
    parent: seg,
    uid: subId(seg, id)
  }
  children.forEach(function(d){
    s.end = d.start
    s.exclusive = s.end - s.start
    subs.push(s)
    id++
    s = {
      start: d.end,
      parent: seg,
      uid: subId(seg, id)
    }
  })
  s.end = seg.end
  s.exclusive = s.end - s.start
  subs.push(s)
  return subs
}

function subId(seg, id){
  return [seg.uid, id.toString(36)].join(':')
}
