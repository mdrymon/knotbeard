'use strict';

var test = require('tape')
var costTree = require("../lib/cost_tree")
var data = require('strong-trace-waterfalldata')
var waterfall = data.expressExample2.waterfalls[0]
var enhanced = costTree(waterfall, data.expressExample2.functions)



test('totalPct', function (t) {

  totalPct(enhanced)
  t.end()

  function totalPct(branch) {
    if (!branch.children) return
    var calc = branch.children.reduce(function (prev, curr, i, arr) {
      return prev + curr.totalPct
    }, branch.selfPct)
    t.ok((calc <= branch.totalPct + 1) && (calc >= branch.totalPct - 1), 'adding child.totalPcts should be within 1% of the parent totalPct ' + calc + ', ' + branch.totalPct)
    branch.children.forEach(totalPct)
  }
})



test('outerCost', function (t) {
  var expected = enhanced.cost || enhanced.childCost
  function walk (branch, i) {
    t.equals(branch.outerCost, expected, 'outercost should be constant for all children')
    branch.children.forEach(walk)
  }
  walk(enhanced)
  t.end()
})


test('stub', function (t) {
  var children = enhanced.children

  t.equal(enhanced.outerCost, 14691, 'root outercost should be the same as 14691')

  // totalPct level1
  t.equal(children[0].totalPct, parseFloat(((children[0].cost / 14691) * 100).toFixed(1)), 'child[0].totalPct === 95.2%')
  t.equal(children[1].totalPct, parseFloat(((children[1].cost / 14691) * 100).toFixed(1)), 'child[1].totalPct === 3%')
  t.equal(children[2].totalPct, parseFloat(((children[2].cost / 14691) * 100).toFixed(1)), 'child[2].totalPct === 0.5%')
  t.equal(children[3].totalPct, parseFloat(((children[3].cost / 14691) * 100).toFixed(1)), 'child[3].totalPct === 0.3%')

  t.end()
})
