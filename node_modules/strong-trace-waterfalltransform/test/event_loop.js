'use strict';

var test = require("tape")

var agg   = require("../lib/event_loop_agg")
var xform = require('../index')

var data  = require('strong-trace-waterfalldata')


test("event loop agg simple", function (t) {
  var copy  = JSON.parse(JSON.stringify(data.express2))
  copy.waterfalls.forEach(function(w){
    var loop = agg(w, copy.functions)
    t.assert(loop, 'aggregrate created successfully')
  })
  t.end()
})

test("event loop agg via enhance", function (t) {
  var copy  = JSON.parse(JSON.stringify(data.express2))
  basicCheck(t, copy)
})

test("event loop agg with express_example2", function(t){
  var copy  = JSON.parse(JSON.stringify(data.expressExample2))
  basicCheck(t, copy)
})

test("event loop agg with express_example3", function(t){
  var copy  = JSON.parse(JSON.stringify(data.expressExample3))
  basicCheck(t, copy)
})

function basicCheck(t, copy){
  var waterfall = xform.enhanceWaterfall(copy)
  waterfall.waterfalls.forEach(function(w){
    t.assert(w.eventLoopAgg, 'aggregrate created successfully')
    t.assert(w.eventLoopAgg.length > 0, '1 or more entries')
    var start = w.eventLoopAgg.length && w.eventLoopAgg[0].start
    w.eventLoopAgg.forEach(function(d){
      t.assert(d.name, 'entry is named')
      t.assert(d.cost >= 0, 'valid cost entry')
      t.assert(d.visits >= 1, 'valid visits entry')
      t.assert(d.type == 'fn' || d.type == 'wait', 'valid type')
      t.assert(d.uid, 'every element has an id')
      //t.assert(d.start >= 0, 'start exists')  TODO start can sometimes be negative
      t.assert(d.end >= d.start, 'end is after start')
      t.assert(d.start >= start, 'array is sorted')
      if( d.type == 'fn' ){
        t.assert(d.costSummary, 'summary exists')
      }
      start = d.start
      if( d.type == 'fn'){
        t.assert(d.costSubTree, 'cost subtree exists')
      }
    })
  })
  t.end()
}
